{"version":3,"sources":["auth/EnterPhoneStep.js","api.js","auth/TokenContext.js","auth/EnterCodeStep.js","auth/Error.js","auth/Auth.js","App.js","serviceWorker.js","AppConfig.js","index.js"],"names":["EnterPhoneStep","props","setCode","phone","setPhone","nextStep","setError","Helmet","Input","value","onChange","event","target","Button","onClick","axios","post","PhoneNumber","api","then","response","data","catch","TokenContext","React","createContext","TokenProvider","children","useState","sessionStorage","getItem","tokenContextValue","token","setToken","Provider","EnterCodeStep","code","useContext","UserName","Password","setStep","Auth","error","step","Error","useStyles","makeStyles","container","height","width","display","alignItems","justifyContent","App","classes","content","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","AppConfig","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20fa55e4.chunk.js","sourcesContent":["import React from 'react'\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { Helmet } from \"react-helmet\";\nimport * as api from '../api';\n\nconst EnterPhoneStep = (props) => {\n    const {\n        setCode,\n        phone, setPhone,\n        nextStep,\n        setError,\n    } = props;\n\n    const enterPhone = () => api.enterPhone(phone)\n        .then(response => {\n            setCode(response.data);\n            nextStep();\n        })\n        .catch(setError);\n\n    return (\n        <>\n            <Helmet>\n                <title>Auth: enter phone</title>\n            </Helmet>\n            <div>\n                <Input\n                    value={phone}\n                    onChange={event => setPhone(event.target.value)}\n                />\n                <Button onClick={enterPhone}>go</Button>\n            </div>\n        </>\n    );\n};\n\nexport default EnterPhoneStep;\n","import axios from 'axios';\nconst host = 'http://5.130.51.166:5000';\n\nexport const enterPhone = (phone) => axios.post(\n    `${host}/api/accounts/register`,\n    { PhoneNumber: phone }\n);\n\nexport const enterCode = (phone, code) => axios.post(\n    'http://5.130.51.166:5000/api/accounts/auth',\n    { UserName: phone, Password: code }\n);\n","import React, { useState } from 'react';\n\nexport const TokenContext = React.createContext({});\n\nconst AUTH_TOKEN_KEY = 'authToken';\n\nexport const TokenProvider = ({ children }) => {\n    const [stateToken, setStateToken] = useState(() => sessionStorage.getItem(AUTH_TOKEN_KEY));\n    // const setSessionToken = (value) => {\n    //     if (value == null) {\n    //         sessionStorage.removeItem(AUTH_TOKEN_KEY);\n    //         setStateToken(undefined);\n    //     } else {\n    //         sessionStorage.setItem(AUTH_TOKEN_KEY, value);\n    //         setStateToken(value);\n    //     }\n    // };\n    const tokenContextValue = { token: stateToken, setToken: setStateToken };\n    return (\n        <TokenContext.Provider value={tokenContextValue}>\n            {children}\n        </TokenContext.Provider>\n    );\n};\n","import React, { useContext } from 'react'\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { Helmet } from \"react-helmet\";\nimport { TokenContext } from './TokenContext';\nimport * as api from '../api';\n\nconst EnterCodeStep = (props) => {\n    const {\n        phone,\n        code,\n        setCode,\n        setError\n    } = props;\n\n    const { setToken } = useContext(TokenContext);\n\n    const enterCode = () => api.enterCode(phone, code)\n        .then(response => setToken(response.data.token))\n        .catch(setError);\n\n    return (\n        <>\n            <Helmet>\n                <title>Auth: enter code</title>\n            </Helmet>\n            <div>\n                <Input\n                    value={code}\n                    onChange={event => setCode(event.target.value)}\n                />\n                <Button onClick={enterCode}>go</Button>\n            </div>\n        </>\n    );\n};\n\nexport default EnterCodeStep;\n","import React, { useContext } from 'react'\nimport Button from '@material-ui/core/Button';\nimport { Helmet } from \"react-helmet\";\nimport { TokenContext } from './TokenContext';\n\nconst EnterCodeStep = (props) => {\n    const {\n        setError,\n        setPhone,\n        setCode,\n        setStep,\n    } = props;\n\n    const { setToken } = useContext(TokenContext);\n\n    const reset = () => {\n        setError(null);\n        setPhone('');\n        setCode('');\n        setStep(0);\n        setToken(null);\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>Auth: error</title>\n            </Helmet>\n            <div>\n                Error!\n                <Button onClick={reset}>reset</Button>\n            </div>\n        </>\n    );\n};\n\nexport default EnterCodeStep;\n","import React, { useState } from 'react'\nimport EnterPhoneStep from './EnterPhoneStep';\nimport EnterCodeStep from './EnterCodeStep';\nimport Error from './Error';\n\nconst Auth = () => {\n    const [phone, setPhone] = useState('');\n    const [code, setCode] = useState('');\n    const [error, setError] = useState(null);\n    const [step, setStep] = useState(0);\n    const nextStep = () => setStep(step + 1);\n\n    if (error) {\n        return <Error {...{ setError, setPhone, setCode, setStep, }} />;\n    }\n\n    return step\n        ? <EnterCodeStep {...{ phone, code, setCode, setError }} />\n        : <EnterPhoneStep {...{ setCode, phone, setPhone, nextStep, setError }} />;\n};\n\nexport default Auth;\n","import React, { useContext } from 'react';\nimport Auth from './auth/Auth';\nimport { Helmet } from \"react-helmet\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TokenContext } from './auth/TokenContext';\n\nconst useStyles = makeStyles({\n    container: {\n        height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n\nconst App = () => {\n    const { token } = useContext(TokenContext);\n    const classes = useStyles();\n\n    const content = token\n        ? <div>{token}</div>\n        : <Auth />;\n\n    return (\n        <>\n            <Helmet>\n                <title>TOKEN RECEIVED</title>\n            </Helmet>\n            <div className={classes.container}>\n                {content}\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { TokenProvider } from './auth/TokenContext';\n\nconst AppConfig = ({ children }) => (\n    <TokenProvider>\n        {children}\n    </TokenProvider>\n);\n\nexport default AppConfig;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AppConfig from './AppConfig';\n\nReactDOM.render(\n    <AppConfig>\n        <App />\n    </AppConfig>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}